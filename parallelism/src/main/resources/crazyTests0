14,16,1,5,3,0,7,0,6,13,18,1,15,5,11,4,7,0,18,3,15,16,7,16,14,7,11,16,11,6,1,1,14,4,5,15,15,19,7,4,12,11,5,7,9,1,10,13,3,6,11,15,7,14,4,8,18,8,12,6,0,8,3,14,16,0,4,9,19,4,7,6,10,1,17,5,16,5,3,10,1,13,10,0,4,7,16,13,3,15,0,14,8,2,0,7,6,15,0,10,10,2,4,18,8,18,2,12,10,3,6,9,11,1,7,10,14,12,6,5,14,9,11,5,2,17,8,17,2,13,7,14,8,19,17,8,18,9,12,11,13,19,5,11,14,14,18,1,6,5,19,17,11,12,5,14,7,17,9,1,9,3,3,14,10,4,10,19,19,3,3,7,16,7,11,4,2,13,11,2,18,5,15,9,2,10,3,13,13,5,16,5,7,11,14,9,3,8,16,9,8,13,8,19,3,17,6,9,3,4,14,9,12,4,12,5,2,14,11,19,6,2,3,6,7,3,2,8,7,1,19,16,13,0,9,8,3,17,6,4,12,5,3,4,0,0,9,5,1,16,14,19,2,3,14,0,15,9,6,6,11,4,2,6,6,6,15,9,19,5,12,5,19,3,14,14,12,7,8,5,1,8,17,6,7,1,12,3,13,7,18,19,9,0,10,17,2,17,19,10
2653
851

For those who have used RxJava/RxJava2 for concurrency before you may have come across the Schedulers class. A brilliantly crafted abstraction of Java concurrency tha allows users to move work off the main thread to a set of predefined Scheduler threads.
The Schedulers implementation behind RxJava2 is quite extensive however

Today we look at the first Scheduler in the list. The Schedules.computation.

What is the computation Scheduler?

I;m obviously not the guy who wrote the library, but this is what I have found out so far regarding the library.


The computation scheduler or the threadpool asssociated with the computation scheduler is rather unique in its ability to be very good at computational tasks.
It does this by creating a fixed number of threads depending on the numbe of processors you currently have (or application has access to).

Computational tasks are defined as
According to “” the brilliant author of LEarning RxJAVa2

By default the following RxJava operators utilize the compition scheudler unless specified otherwise
r interval() , delay() , timer() ,
timeout() , buffer() , take() , skip() , takeWhile() , skipWhile() ,
window() , and a few others.

Beacuase processors are great at such “computational” tasks such as math, complex algorithms. Splitting a processor to contain as manu threads as possible is an innefficient way to utilize this, instead creating a number of threads thats fixed to the number of actual processors is the most efficient way of performing this action.
This differes from Schedulers.io() which perfrom less computationally intesive tasks and work with simple IO operations which are maximized by the number of threads you have.

Don’t forget for those memory conscious developers, every new thread that is spooled up requires at least 64K of memory to begin operating.

If you dig into the core itnernals of every scheduler, ar ejust basic JAva Threadinign primitives that thos experience with concnrurercny and parallelism in JAva would understand.

Executors and ThreadPoolExecutors are abstracted by theSchedulers such that you do not have to go ahead and create them.

As Dan Lew said in the Android Fragmentet Podcast, if you’re just using RxJAVA2 for concurrency then you are innefare rtequiresting a massive library for an operation that exists nnatively to any java developer

